const WebSocket = require("ws");

const ws = new WebSocket("ws:localhost:8080");

let stats = {
  system: 0,
  internal: 0,
  ticks: 0,
  indicators: 0,
  orderbook: 0,
};

let lastTickTime = null;
let ticksPerSecond = [];

ws.on("open", () => {
  console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É\n");

  setTimeout(() => {
    console.log("üì• –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã...\n");
    ws.send(
      JSON.stringify({
        type: "subscribe",
        channels: ["logs", "ticks", "indicators", "orderbook"],
        timestamp: Date.now(),
      })
    );
  }, 1000);
});

ws.on("message", (data) => {
  const message = JSON.parse(data.toString());

  // –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏
  if (message.type === "log" && message.category === "system") {
    stats.system++;
    if (message.message.includes("PONG")) {
      const latencyMatch = message.message.match(/–∑–∞–¥–µ—Ä–∂–∫–∞: (\d+)ms/);
      if (latencyMatch) {
        console.log(`üèì PONG | –ó–∞–¥–µ—Ä–∂–∫–∞: ${latencyMatch[1]}ms`);
      }
    }
  }

  // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ª–æ–≥–∏
  if (message.type === "log" && message.category === "internal") {
    stats.internal++;
  }

  // –¢–ò–ö–ò - –¥–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
  if (message.type === "tick") {
    stats.ticks++;
    const now = Date.now();

    if (lastTickTime) {
      const interval = now - lastTickTime;
      ticksPerSecond.push(1000 / interval);
      if (ticksPerSecond.length > 10) ticksPerSecond.shift();
    }

    lastTickTime = now;

    const avgTPS =
      ticksPerSecond.length > 0
        ? (
            ticksPerSecond.reduce((a, b) => a + b) / ticksPerSecond.length
          ).toFixed(1)
        : 0;

    console.log(
      `üìà TICK #${stats.ticks} | ${message.symbol} @ $${message.price.toFixed(
        2
      )} | Avg: ${avgTPS} t/s`
    );
  }

  // –ò–ù–î–ò–ö–ê–¢–û–†–´
  if (message.type === "indicator") {
    stats.indicators++;

    if (message.name === "tick_speed") {
      console.log(
        `‚ö° TICK SPEED | ${message.data.ticksPerMinute} t/min | ${
          message.data.activityLevel
        } | Trend: ${message.data.trend}${
          message.data.isSpike ? " üí• SPIKE!" : ""
        }`
      );
    }

    if (message.name === "orderbook_pressure") {
      const d = message.data;
      console.log(
        `üìä PRESSURE | ${d.direction} | BID: ${d.bidPercent.toFixed(
          1
        )}% | ASK: ${d.askPercent.toFixed(1)}% | OBI: ${d.imbalance.toFixed(3)}`
      );
    }

    if (message.name === "volume_confirmation") {
      const d = message.data;
      const emoji =
        d.signal === "STRONG_BUY" || d.signal === "STRONG_SELL" ? "üí•" : "";
      console.log(
        `üìä VOLUME | ${d.signal} ${emoji} | Ratio: ${d.volumeRatio.toFixed(
          2
        )}x | Price: ${d.priceChange > 0 ? "+" : ""}${d.priceChange.toFixed(
          2
        )}% | ${d.isConfirmed ? "‚úÖ CONFIRMED" : "‚ö™"}`
      );
    }
  }

  // ORDER BOOK
  if (message.type === "orderbook") {
    stats.orderbook++;
    const d = message.data;
    console.log(
      `üìñ ORDERBOOK #${stats.orderbook} | ${
        message.symbol
      } | BID: ${d.bidPercent.toFixed(1)}% | ASK: ${d.askPercent.toFixed(
        1
      )}% | Spread: $${d.spread?.toFixed(2) || "?"}`
    );
  }

  if (message.type === "subscribed") {
    console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞:", message.channels.join(", "), "\n");
  }
});

ws.on("error", (error) => {
  console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
setInterval(() => {
  const total = Object.values(stats).reduce((a, b) => a + b, 0);
  console.log("\n" + "=".repeat(60));
  console.log("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è)");
  console.log("=".repeat(60));
  console.log(`   SYSTEM:      ${stats.system}`);
  console.log(`   INTERNAL:    ${stats.internal}`);
  console.log(`   TICKS:       ${stats.ticks}`);
  console.log(`   INDICATORS:  ${stats.indicators}`);
  console.log(`   ORDERBOOK:   ${stats.orderbook}`);
  console.log(`   –í–°–ï–ì–û:       ${total}`);
  console.log("=".repeat(60) + "\n");
}, 15000);

// –§–∏–Ω–∞–ª —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
setTimeout(() => {
  const total = Object.values(stats).reduce((a, b) => a + b, 0);
  console.log("\n" + "=".repeat(60));
  console.log("üèÅ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê");
  console.log("=".repeat(60));
  console.log(`   SYSTEM –ª–æ–≥–æ–≤:    ${stats.system}`);
  console.log(`   INTERNAL –ª–æ–≥–æ–≤:  ${stats.internal}`);
  console.log(`   –¢–∏–∫–æ–≤:           ${stats.ticks}`);
  console.log(`   –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:     ${stats.indicators}`);
  console.log(`   Order Book:      ${stats.orderbook}`);
  console.log(`   –í–°–ï–ì–û:           ${total}`);
  console.log("=".repeat(60));

  if (stats.ticks === 0) {
    console.log("\n‚ö†Ô∏è  –¢–ò–ö–ò –ù–ï –ü–û–õ–£–ß–ï–ù–´!");
    console.log("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:");
    console.log("  - –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ —Ä—ã–Ω–∫–µ ETH_USDT");
    console.log("  - –ù–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ticks");
    console.log("  - –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ Gate.io");
  } else {
    const avgPerMin = (stats.ticks / 60).toFixed(1);
    console.log(`\n‚úÖ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${avgPerMin} —Ç–∏–∫–æ–≤/–º–∏–Ω`);
  }

  ws.close();
  process.exit(0);
}, 60000);
