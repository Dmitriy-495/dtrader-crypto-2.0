/**
 * dtrader-crypto-2.0 - –°–µ—Ä–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
 * –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 */

import * as dotenv from 'dotenv';
import { GateIO, SpotBalance } from './GateIO';
import { DTrader } from './DTrader';
import { LogBroadcaster } from './core/LogBroadcaster';
import { Logger } from './core/Logger';

// ============================================================================
// –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø
// ============================================================================

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ .env
dotenv.config();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
const GATE_API_KEY = process.env.GATE_API_KEY;
const GATE_API_SECRET = process.env.GATE_API_SECRET;
const GATE_API_URL = process.env.GATE_API_URL || 'https://api.gateio.ws';
const GATE_WS_URL = process.env.GATE_WS_URL || 'wss://api.gateio.ws/ws/v4/';

// –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã)
const PING_INTERVAL = parseInt(process.env.PING_INTERVAL || '15') * 1000;

// Order Book –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const ORDER_BOOK_SYMBOL = process.env.ORDER_BOOK_SYMBOL || 'ETH_USDT';
const ORDER_BOOK_DEPTH = parseInt(process.env.ORDER_BOOK_DEPTH || '20');

// Log Broadcasting –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const LOG_BROADCAST_ENABLED = process.env.LOG_BROADCAST_ENABLED === 'true';
const LOG_BROADCAST_PORT = parseInt(process.env.LOG_BROADCAST_PORT || '8080');

if (!GATE_API_KEY || !GATE_API_SECRET) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –∑–∞–¥–∞–Ω—ã GATE_API_KEY –∏–ª–∏ GATE_API_SECRET –≤ .env —Ñ–∞–π–ª–µ!');
  process.exit(1);
}

// ============================================================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ============================================================================

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –±–∞–ª–∞–Ω—Å—ã –≤ –∫–æ–Ω—Å–æ–ª—å –∫—Ä–∞—Å–∏–≤–æ
 * 
 * @param balances - –ú–∞—Å—Å–∏–≤ –±–∞–ª–∞–Ω—Å–æ–≤ –æ—Ç API
 */
function displayBalances(balances: SpotBalance[]): void {
  console.log('\n' + '='.repeat(70));
  console.log('üí∞ –ë–ê–õ–ê–ù–° –°–ü–û–¢–û–í–û–ì–û –ö–û–®–ï–õ–¨–ö–ê GATE.IO');
  console.log('='.repeat(70));
  
  if (balances.length === 0) {
    console.log('   –ë–∞–ª–∞–Ω—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ —Ä–∞–≤–Ω—ã –Ω—É–ª—é');
  } else {
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    const nonZeroBalances = balances.filter(
      b => parseFloat(b.available) > 0 || parseFloat(b.locked) > 0
    );
    
    if (nonZeroBalances.length === 0) {
      console.log('   –í—Å–µ –±–∞–ª–∞–Ω—Å—ã —Ä–∞–≤–Ω—ã –Ω—É–ª—é');
    } else {
      console.log('\n   –í–∞–ª—é—Ç–∞       –î–æ—Å—Ç—É–ø–Ω–æ              –í –∑–∞–∫–∞–∑–∞—Ö            –í—Å–µ–≥–æ');
      console.log('   ' + '-'.repeat(66));
      
      nonZeroBalances.forEach(balance => {
        const currency = balance.currency.padEnd(12);
        const available = parseFloat(balance.available).toFixed(8).padStart(20);
        const locked = parseFloat(balance.locked).toFixed(8).padStart(20);
        const total = (
          parseFloat(balance.available) + parseFloat(balance.locked)
        ).toFixed(8).padStart(20);
        
        console.log(`   ${currency} ${available}  ${locked}  ${total}`);
      });
    }
  }
  
  console.log('='.repeat(70) + '\n');
}

// ============================================================================
// –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
// ============================================================================

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
async function main(): Promise<void> {
  console.clear(); // –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  
  console.log('\nüöÄ –ó–∞–ø—É—Å–∫ dtrader-crypto-2.0 [Server v1.0]');
  console.log('üìç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gate.io API...');
  console.log(`üìç REST API URL: ${GATE_API_URL}`);
  console.log(`üìç WebSocket URL: ${GATE_WS_URL}`);
  console.log(`üìç Ping –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${PING_INTERVAL / 1000}—Å`);
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LogBroadcaster –∏ Logger
    let logBroadcaster: LogBroadcaster | undefined;
    let logger: Logger | undefined;
    
    if (LOG_BROADCAST_ENABLED) {
      logBroadcaster = new LogBroadcaster({
        port: LOG_BROADCAST_PORT,
        enabled: LOG_BROADCAST_ENABLED
      });
      
      logger = new Logger();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º LogBroadcaster
      logBroadcaster.start();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç console
      logger.startIntercepting();
    }
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ GateIO –¥–ª—è REST API
    const gateio = new GateIO({
      apiKey: GATE_API_KEY!,
      apiSecret: GATE_API_SECRET!,
      apiUrl: GATE_API_URL
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ REST API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    console.log('\nüì° –ü—Ä–æ–≤–µ—Ä–∫–∞ REST API: –∑–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞...');
    
    try {
      const balances = await gateio.getSpotBalance();
      displayBalances(balances);
      console.log('‚úÖ REST API —Ä–∞–±–æ—Ç–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ!');
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error.message);
      console.log('‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–µ');
      console.log('‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∫–ª—é—á–∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞');
      process.exit(1);
    }
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–≤–∏–∂–∫–∞ —Å Order Book –∏ Log Broadcasting
    const dtrader = new DTrader({
      gateio: gateio,
      wsUrl: GATE_WS_URL,
      pingInterval: PING_INTERVAL,
      orderBookSymbol: ORDER_BOOK_SYMBOL,
      orderBookDepth: ORDER_BOOK_DEPTH,
      logBroadcaster: logBroadcaster,
      logger: logger
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–≤–∏–∂–æ–∫
    await dtrader.start();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', async () => {
      console.log('\n\n‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT (Ctrl+C)');
      await dtrader.stop();
      process.exit(0);
    });
    
    process.on('SIGTERM', async () => {
      console.log('\n\n‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM');
      await dtrader.stop();
      process.exit(0);
    });
    
    // –î–≤–∏–∂–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    console.log('üí° –î–≤–∏–∂–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n');
    
  } catch (error: any) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:');
    console.error(`   ${error.message}`);
    process.exit(1);
  }
}

// ============================================================================
// –¢–û–ß–ö–ê –í–•–û–î–ê
// ============================================================================

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main();