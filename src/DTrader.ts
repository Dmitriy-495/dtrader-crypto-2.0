/**
 * –î–≤–∏–∂–æ–∫ (—è–¥—Ä–æ) —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã dtrader
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∏ –æ—Å–Ω–æ–≤–Ω—ã–º —Ü–∏–∫–ª–æ–º —Ä–∞–±–æ—Ç—ã
 */

import WebSocket from "ws";
import { GateIO } from "./GateIO";
import { OrderBookManager } from "./core/OrderBookManager";
import { LogBroadcaster } from "./core/LogBroadcaster";
import { Logger } from "./core/Logger";

// ============================================================================
// –¢–ò–ü–´ –ò –ò–ù–¢–ï–†–§–ï–ô–°–´
// ============================================================================

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞
 */
export interface DTraderConfig {
  gateio: GateIO; // –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gate.io REST API
  wsUrl?: string; // URL –¥–ª—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  pingInterval?: number; // –ò–Ω—Ç–µ—Ä–≤–∞–ª ping –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15 —Å–µ–∫—É–Ω–¥)
  orderBookSymbol?: string; // –°–∏–º–≤–æ–ª –¥–ª—è Order Book (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  orderBookDepth?: number; // –ì–ª—É–±–∏–Ω–∞ Order Book (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  logBroadcaster?: LogBroadcaster; // LogBroadcaster –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –ª–æ–≥–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  logger?: Logger; // Logger –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ console (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
}

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–∏–∂–∫–∞
 */
enum EngineState {
  STOPPED = "STOPPED",
  STARTING = "STARTING",
  RUNNING = "RUNNING",
  STOPPING = "STOPPING",
}

// ============================================================================
// –ö–õ–ê–°–° DTRADER (–î–í–ò–ñ–û–ö)
// ============================================================================

export class DTrader {
  private gateio: GateIO;
  private wsUrl: string;
  private ws: WebSocket | null = null;
  private pingInterval: number;
  private pingTimer: NodeJS.Timeout | null = null;
  private pongTimeout: NodeJS.Timeout | null = null;
  private lastPongTime: number = 0;
  private lastPingSentTime: number = 0;
  private connectionStartTime: number = 0;
  private state: EngineState = EngineState.STOPPED;

  // Order Book Manager
  private orderBookManager: OrderBookManager | null = null;

  // Log Broadcasting
  private logBroadcaster: LogBroadcaster | null = null;
  private logger: Logger | null = null;

  /**
   * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–≤–∏–∂–∫–∞
   * @param config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
   */
  constructor(config: DTraderConfig) {
    this.gateio = config.gateio;
    this.wsUrl = config.wsUrl || "wss://api.gateio.ws/ws/v4/";
    this.pingInterval = config.pingInterval || 15000; // 15 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OrderBookManager –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Å–∏–º–≤–æ–ª
    if (config.orderBookSymbol) {
      this.orderBookManager = new OrderBookManager({
        symbol: config.orderBookSymbol,
        depth: config.orderBookDepth || 10,
        gateio: this.gateio,
      });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LogBroadcaster –∏ Logger
    this.logBroadcaster = config.logBroadcaster || null;
    this.logger = config.logger || null;

    // –°–≤—è–∑—ã–≤–∞–µ–º Logger —Å LogBroadcaster
    if (this.logger && this.logBroadcaster) {
      this.logger.setBroadcaster(this.logBroadcaster);
    }
  }

  // ==========================================================================
  // –£–ü–†–ê–í–õ–ï–ù–ò–ï –ñ–ò–ó–ù–ï–ù–ù–´–ú –¶–ò–ö–õ–û–ú
  // ==========================================================================

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–≤–∏–∂–æ–∫
   */
  async start(): Promise<void> {
    if (this.state !== EngineState.STOPPED) {
      console.log("‚ö†Ô∏è  –î–≤–∏–∂–æ–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è");
      return;
    }

    this.state = EngineState.STARTING;
    console.log("\nüöÄ –ó–∞–ø—É—Å–∫ –¥–≤–∏–∂–∫–∞ dtrader...");

    try {
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
      await this.connectWebSocket();

      // –ó–∞–ø—É—Å–∫–∞–µ–º ping-pong –º–µ—Ö–∞–Ω–∏–∑–º
      this.startPingPong();

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
      this.subscribeToBalances();

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–∏–∫–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
      this.subscribeToTicker();

      // –ï—Å–ª–∏ –µ—Å—Ç—å OrderBookManager, –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Order Book
      if (this.orderBookManager) {
        this.subscribeToOrderBookUpdates();

        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await this.sleep(500);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Order Book
        await this.orderBookManager.initialize();
      }

      this.state = EngineState.RUNNING;
      console.log("‚úÖ –î–≤–∏–∂–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç\n");
    } catch (error: any) {
      this.state = EngineState.STOPPED;
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–≤–∏–∂–∫–∞: ${error.message}`);
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–≤–∏–∂–æ–∫
   */
  async stop(): Promise<void> {
    if (this.state !== EngineState.RUNNING) {
      console.log("‚ö†Ô∏è  –î–≤–∏–∂–æ–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω");
      return;
    }

    this.state = EngineState.STOPPING;
    console.log("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–∏–∂–∫–∞...");

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ping-pong
    this.stopPingPong();

    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –∫–æ–Ω—Ç—Ä–æ–ª—è pong
    if (this.pongTimeout) {
      clearTimeout(this.pongTimeout);
      this.pongTimeout = null;
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (this.ws) {
      this.ws.close();
      this.ws = null;
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º LogBroadcaster –µ—Å–ª–∏ –µ—Å—Ç—å
    if (this.logBroadcaster) {
      this.logBroadcaster.stop();
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Logger –µ—Å–ª–∏ –µ—Å—Ç—å
    if (this.logger) {
      this.logger.stopIntercepting();
    }

    this.state = EngineState.STOPPED;
    console.log("‚úÖ –î–≤–∏–∂–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n");
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–∏–∂–∫–∞
   */
  getState(): string {
    return this.state;
  }

  // ==========================================================================
  // WEBSOCKET
  // ==========================================================================

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gate.io
   */
  private connectWebSocket(): Promise<void> {
    return new Promise((resolve, reject) => {
      console.log(`üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket: ${this.wsUrl}`);

      try {
        this.ws = new WebSocket(this.wsUrl);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this.ws.on("open", () => {
          this.connectionStartTime = Date.now();
          console.log("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
          resolve();
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        this.ws.on("message", (data: WebSocket.Data) => {
          this.handleWebSocketMessage(data);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        this.ws.on("error", (error: Error) => {
          console.error("‚ùå WebSocket –æ—à–∏–±–∫–∞:", error.message);
          reject(error);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this.ws.on("close", (code: number, reason: string) => {
          console.log(
            `üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. –ö–æ–¥: ${code}, –ü—Ä–∏—á–∏–Ω–∞: ${
              reason || "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            }`
          );

          // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–ª–æ—Å—å –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
          if (this.state === EngineState.RUNNING) {
            console.log("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...");
            setTimeout(() => {
              if (this.state === EngineState.RUNNING) {
                this.reconnectWebSocket();
              }
            }, 5000);
          }
        });
      } catch (error: any) {
        reject(error);
      }
    });
  }

  /**
   * –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
   */
  private async reconnectWebSocket(): Promise<void> {
    const uptime = this.connectionStartTime
      ? Math.floor((Date.now() - this.connectionStartTime) / 1000)
      : 0;
    console.log(
      `üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket... (–ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–ª–æ ${uptime}—Å)`
    );

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (this.ws) {
      this.ws.removeAllListeners();
      this.ws = null;
    }

    try {
      await this.connectWebSocket();
      console.log("‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ");

      // –ü–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
      this.subscribeToBalances();
      this.subscribeToTicker();
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", error.message);
      console.log("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...");

      setTimeout(() => {
        if (this.state === EngineState.RUNNING) {
          this.reconnectWebSocket();
        }
      }, 5000);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç WebSocket
   */
  private handleWebSocketMessage(data: WebSocket.Data): void {
    try {
      const message = JSON.parse(data.toString());
      const receivedTime = Date.now();
      const timeISO = new Date(receivedTime).toISOString();

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º pong –æ—Ç–≤–µ—Ç
      if (message.channel === "spot.pong") {
        this.lastPongTime = receivedTime;

        // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        const latency = receivedTime - this.lastPingSentTime;

        console.log(`üèì PONG –ø–æ–ª—É—á–µ–Ω [${timeISO}] –∑–∞–¥–µ—Ä–∂–∫–∞: ${latency}ms`);

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∫–æ–Ω—Ç—Ä–æ–ª—è pong
        if (this.pongTimeout) {
          clearTimeout(this.pongTimeout);
          this.pongTimeout = null;
        }

        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
      if (message.channel === "spot.balances") {
        this.handleBalanceUpdate(message);
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (message.channel === "spot.tickers") {
        this.handleTickerUpdate(message);
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Order Book
      if (message.channel === "spot.order_book_update") {
        this.handleOrderBookUpdate(message);
        return;
      }

      // –ó–¥–µ—Å—å –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:", error.message);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤
   */
  private handleBalanceUpdate(message: any): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    if (message.event === "subscribe") {
      if (message.error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å—ã:", message.error);
      } else {
        console.log("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤");
      }
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if (message.event === "update" && message.result) {
      console.log("\nüí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:");
      message.result.forEach((balance: any) => {
        const currency = balance.currency;
        const available = parseFloat(balance.available).toFixed(8);
        const locked = parseFloat(balance.freeze).toFixed(8);
        const change = balance.change;

        console.log(
          `   ${currency}: –¥–æ—Å—Ç—É–ø–Ω–æ ${available}, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ ${locked}, –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${change}`
        );
      });
      console.log("");
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞
   */
  private handleTickerUpdate(message: any): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    if (message.event === "subscribe") {
      if (message.error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–∏–∫–µ—Ä:", message.error);
      } else {
        console.log("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä ETH_USDT");
      }
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞
    if (message.event === "update" && message.result) {
      const ticker = message.result;
      const price = parseFloat(ticker.last).toFixed(2);
      const timeISO = new Date().toISOString();

      console.log(
        `üìä –¢–∏–∫–µ—Ä ${ticker.currency_pair} [${timeISO}]: ${price} USDT`
      );
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Order Book
   */
  private handleOrderBookUpdate(message: any): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    if (message.event === "subscribe") {
      if (message.error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Order Book:", message.error);
      } else {
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Order Book`);
      }
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Order Book
    if (message.event === "update" && message.result && this.orderBookManager) {
      this.orderBookManager.processUpdate(message.result);

      // –í—ã–≤–æ–¥–∏–º Order Book –∫–∞–∂–¥–æ–µ 50-–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      const updateId = message.result.u;
      if (updateId % 50 === 0) {
        this.orderBookManager.displayOrderBook();
      }
    }
  }

  // ==========================================================================
  // PING-PONG –ú–ï–•–ê–ù–ò–ó–ú
  // ==========================================================================

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É ping —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  private startPingPong(): void {
    console.log(
      `üèì –ó–∞–ø—É—Å–∫ ping-pong —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${this.pingInterval / 1000} —Å–µ–∫—É–Ω–¥`
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π ping —Å—Ä–∞–∑—É
    this.sendPing();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    this.pingTimer = setInterval(() => {
      this.sendPing();
    }, this.pingInterval);
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ping-pong –º–µ—Ö–∞–Ω–∏–∑–º
   */
  private stopPingPong(): void {
    if (this.pingTimer) {
      clearInterval(this.pingTimer);
      this.pingTimer = null;
      console.log("üèì Ping-pong –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ping —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
   */
  private sendPing(): void {
    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
      console.log("‚ö†Ô∏è  WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ping");
      return;
    }

    const currentTime = Math.floor(Date.now() / 1000);
    const pingMessage = {
      time: currentTime,
      channel: "spot.ping",
    };

    try {
      this.lastPingSentTime = Date.now();
      const timeISO = new Date(this.lastPingSentTime).toISOString();

      this.ws.send(JSON.stringify(pingMessage));
      console.log(`üèì PING –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω [${timeISO}]`);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∫–æ–Ω—Ç—Ä–æ–ª—è - –µ—Å–ª–∏ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –Ω–µ –ø–æ–ª—É—á–∏–º pong, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
      this.pongTimeout = setTimeout(() => {
        const timeSinceLastPong = Date.now() - this.lastPongTime;
        console.log(
          `‚ö†Ô∏è  PONG –Ω–µ –ø–æ–ª—É—á–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ (–ø–æ—Å–ª–µ–¥–Ω–∏–π: ${Math.floor(
            timeSinceLastPong / 1000
          )}—Å –Ω–∞–∑–∞–¥)`
        );
        console.log("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...");

        if (this.state === EngineState.RUNNING) {
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
          if (this.ws) {
            this.ws.close();
          }
          // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ 'close'
        }
      }, 30000); // 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ pong
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ping:", error.message);
    }
  }

  // ==========================================================================
  // –ü–û–î–ü–ò–°–ö–ò –ù–ê –ö–ê–ù–ê–õ–´ WEBSOCKET
  // ==========================================================================

  /**
   * –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ —á–µ—Ä–µ–∑ WebSocket
   */
  private subscribeToBalances(): void {
    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
      console.log(
        "‚ö†Ô∏è  WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å—ã"
      );
      return;
    }

    console.log("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤...");

    const currentTime = Math.floor(Date.now() / 1000);
    const channel = "spot.balances";
    const event = "subscribe";

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const auth = this.gateio.generateWebSocketAuth(channel, event, currentTime);

    const subscribeMessage = {
      time: currentTime,
      channel: channel,
      event: event,
      auth: auth,
    };

    try {
      this.ws.send(JSON.stringify(subscribeMessage));
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å—ã:", error.message);
    }
  }

  /**
   * –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Ç–∏–∫–µ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
   */
  private subscribeToTicker(): void {
    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
      console.log(
        "‚ö†Ô∏è  WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–∏–∫–µ—Ä"
      );
      return;
    }

    console.log("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä ETH_USDT...");

    const subscribeMessage = this.gateio.createTickerSubscription(["ETH_USDT"]);

    try {
      this.ws.send(JSON.stringify(subscribeMessage));
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–∏–∫–µ—Ä:", error.message);
    }
  }

  /**
   * –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Order Book
   */
  private subscribeToOrderBookUpdates(): void {
    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
      console.log(
        "‚ö†Ô∏è  WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Order Book"
      );
      return;
    }

    if (!this.orderBookManager) {
      console.log("‚ö†Ô∏è  OrderBookManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
      return;
    }

    const symbol = this.orderBookManager.getOrderBook()?.symbol || "ETH_USDT";
    console.log(`üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Order Book –¥–ª—è ${symbol}...`);

    const subscribeMessage = this.gateio.createOrderBookUpdateSubscription(
      symbol,
      "100ms"
    );

    try {
      this.ws.send(JSON.stringify(subscribeMessage));
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Order Book:", error.message);
    }
  }

  // ==========================================================================
  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  // ==========================================================================

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
   */
  private sleep(ms: number): Promise<void> {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
}
