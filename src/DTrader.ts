/**
 * –î–≤–∏–∂–æ–∫ (—è–¥—Ä–æ) —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã dtrader
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∏ –æ—Å–Ω–æ–≤–Ω—ã–º —Ü–∏–∫–ª–æ–º —Ä–∞–±–æ—Ç—ã
 */

import WebSocket from "ws";
import { GateIO } from "./GateIO";
import { OrderBookManager } from "./core/OrderBookManager";
import { BroadcastManager } from "./core/BroadcastManager";
import { Logger } from "./core/Logger";
import { TickSpeedIndicator } from "./indicators/TickSpeedIndicator";
import {
  OrderBookPressureIndicator,
  OrderBookPressureResult,
} from "./indicators/OrderBookPressureIndicator";
import { MessageType } from "./types";

// ============================================================================
// –¢–ò–ü–´ –ò –ò–ù–¢–ï–†–§–ï–ô–°–´
// ============================================================================

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞
 */
export interface DTraderConfig {
  gateio: GateIO;
  wsUrl?: string;
  pingInterval?: number;
  orderBookSymbol?: string;
  orderBookDepth?: number;
  broadcastManager?: BroadcastManager;
  logger?: Logger;
}

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–∏–∂–∫–∞
 */
enum EngineState {
  STOPPED = "STOPPED",
  STARTING = "STARTING",
  RUNNING = "RUNNING",
  STOPPING = "STOPPING",
}

// ============================================================================
// –ö–õ–ê–°–° DTRADER (–î–í–ò–ñ–û–ö)
// ============================================================================

export class DTrader {
  private gateio: GateIO;
  private wsUrl: string;
  private ws: WebSocket | null = null;
  private pingInterval: number;
  private pingTimer: NodeJS.Timeout | null = null;
  private pongTimeout: NodeJS.Timeout | null = null;
  private lastPongTime: number = 0;
  private lastPingSentTime: number = 0;
  private connectionStartTime: number = 0;
  private state: EngineState = EngineState.STOPPED;

  // Order Book Manager
  private orderBookManager: OrderBookManager | null = null;

  // Broadcast Manager
  private broadcastManager: BroadcastManager | null = null;
  private logger: Logger | null = null;

  // ‚úÖ –ò–ù–î–ò–ö–ê–¢–û–†–´
  private tickSpeedIndicator: TickSpeedIndicator;
  private obPressureIndicator: OrderBookPressureIndicator;
  private previousOBPressure: OrderBookPressureResult | null = null;
  private tickCounter: number = 0;
  private obUpdateCounter: number = 0;

  constructor(config: DTraderConfig) {
    this.gateio = config.gateio;
    this.wsUrl = config.wsUrl || "wss://api.gateio.ws/ws/v4/";
    this.pingInterval = config.pingInterval || 15000;

    this.broadcastManager = config.broadcastManager || null;
    this.logger = config.logger || null;

    if (this.logger && this.broadcastManager) {
      this.logger.setBroadcaster(this.broadcastManager);
    }

    if (config.orderBookSymbol) {
      this.orderBookManager = new OrderBookManager({
        symbol: config.orderBookSymbol,
        depth: config.orderBookDepth || 10,
        gateio: this.gateio,
        broadcastManager: this.broadcastManager || undefined,
      });
    }

    // ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    this.tickSpeedIndicator = new TickSpeedIndicator({
      windowMinutes: 1,
      alertThresholds: {
        low: 20,
        normal: 100,
        high: 300,
        extreme: 600,
      },
    });

    this.obPressureIndicator = new OrderBookPressureIndicator({
      depthLevels: 10,
      weightedMode: true,
    });

    console.log("‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: TickSpeed, OrderBookPressure");
  }

  // ==========================================================================
  // –£–ü–†–ê–í–õ–ï–ù–ò–ï –ñ–ò–ó–ù–ï–ù–ù–´–ú –¶–ò–ö–õ–û–ú
  // ==========================================================================

  async start(): Promise<void> {
    if (this.state !== EngineState.STOPPED) {
      console.log("‚ö†Ô∏è  –î–≤–∏–∂–æ–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è");
      return;
    }

    this.state = EngineState.STARTING;
    console.log("\nüöÄ –ó–∞–ø—É—Å–∫ –¥–≤–∏–∂–∫–∞ dtrader...");

    try {
      await this.connectWebSocket();
      this.startPingPong();
      this.subscribeToBalances();
      this.subscribeToTicker();

      if (this.orderBookManager) {
        this.subscribeToOrderBookUpdates();
        await this.sleep(500);
        await this.orderBookManager.initialize();
      }

      this.state = EngineState.RUNNING;
      console.log("‚úÖ –î–≤–∏–∂–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç\n");
    } catch (error: any) {
      this.state = EngineState.STOPPED;
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–≤–∏–∂–∫–∞: ${error.message}`);
    }
  }

  async stop(): Promise<void> {
    if (this.state !== EngineState.RUNNING) {
      console.log("‚ö†Ô∏è  –î–≤–∏–∂–æ–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω");
      return;
    }

    this.state = EngineState.STOPPING;
    console.log("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–∏–∂–∫–∞...");

    this.stopPingPong();

    if (this.pongTimeout) {
      clearTimeout(this.pongTimeout);
      this.pongTimeout = null;
    }

    if (this.ws) {
      this.ws.close();
      this.ws = null;
    }

    if (this.broadcastManager) {
      this.broadcastManager.stop();
    }

    if (this.logger) {
      this.logger.stopIntercepting();
    }

    this.state = EngineState.STOPPED;
    console.log("‚úÖ –î–≤–∏–∂–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n");
  }

  getState(): string {
    return this.state;
  }

  // ==========================================================================
  // WEBSOCKET
  // ==========================================================================

  private connectWebSocket(): Promise<void> {
    return new Promise((resolve, reject) => {
      console.log(`üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket: ${this.wsUrl}`);

      try {
        this.ws = new WebSocket(this.wsUrl);

        this.ws.on("open", () => {
          this.connectionStartTime = Date.now();
          console.log("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
          resolve();
        });

        this.ws.on("message", (data: WebSocket.Data) => {
          this.handleWebSocketMessage(data);
        });

        this.ws.on("error", (error: Error) => {
          console.error("‚ùå WebSocket –æ—à–∏–±–∫–∞:", error.message);
          reject(error);
        });

        this.ws.on("close", (code: number, reason: string) => {
          console.log(
            `üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. –ö–æ–¥: ${code}, –ü—Ä–∏—á–∏–Ω–∞: ${
              reason || "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            }`
          );

          if (this.state === EngineState.RUNNING) {
            console.log("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...");
            setTimeout(() => {
              if (this.state === EngineState.RUNNING) {
                this.reconnectWebSocket();
              }
            }, 5000);
          }
        });
      } catch (error: any) {
        reject(error);
      }
    });
  }

  private async reconnectWebSocket(): Promise<void> {
    const uptime = this.connectionStartTime
      ? Math.floor((Date.now() - this.connectionStartTime) / 1000)
      : 0;
    console.log(
      `üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket... (–ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–ª–æ ${uptime}—Å)`
    );

    if (this.ws) {
      this.ws.removeAllListeners();
      this.ws = null;
    }

    try {
      await this.connectWebSocket();
      console.log("‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ");

      this.subscribeToBalances();
      this.subscribeToTicker();
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", error.message);
      console.log("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...");

      setTimeout(() => {
        if (this.state === EngineState.RUNNING) {
          this.reconnectWebSocket();
        }
      }, 5000);
    }
  }

  private handleWebSocketMessage(data: WebSocket.Data): void {
    try {
      const message = JSON.parse(data.toString());
      const receivedTime = Date.now();
      const timeISO = new Date(receivedTime).toISOString();

      if (message.channel === "spot.pong") {
        this.lastPongTime = receivedTime;
        const latency = receivedTime - this.lastPingSentTime;
        console.log(`üèì PONG –ø–æ–ª—É—á–µ–Ω [${timeISO}] –∑–∞–¥–µ—Ä–∂–∫–∞: ${latency}ms`);

        if (this.pongTimeout) {
          clearTimeout(this.pongTimeout);
          this.pongTimeout = null;
        }
        return;
      }

      if (message.channel === "spot.balances") {
        this.handleBalanceUpdate(message);
        return;
      }

      if (message.channel === "spot.tickers") {
        this.handleTickerUpdate(message);
        return;
      }

      if (message.channel === "spot.order_book_update") {
        this.handleOrderBookUpdate(message);
        return;
      }
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:", error.message);
    }
  }

  private handleBalanceUpdate(message: any): void {
    if (message.event === "subscribe") {
      if (message.error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å—ã:", message.error);
      } else {
        console.log("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤");
      }
      return;
    }

    if (message.event === "update" && message.result) {
      console.log("\nüí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:");
      message.result.forEach((balance: any) => {
        const currency = balance.currency;
        const available = parseFloat(balance.available).toFixed(8);
        const locked = parseFloat(balance.freeze).toFixed(8);
        const change = balance.change;

        console.log(
          `   ${currency}: –¥–æ—Å—Ç—É–ø–Ω–æ ${available}, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ ${locked}, –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${change}`
        );
      });
      console.log("");

      // ‚úÖ –¢—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å—ã –∫–ª–∏–µ–Ω—Ç–∞–º
      if (this.broadcastManager && this.broadcastManager.isActive()) {
        const balances = message.result.map((balance: any) => ({
          currency: balance.currency,
          available: parseFloat(balance.available),
          locked: parseFloat(balance.freeze),
        }));

        this.broadcastManager.broadcast({
          type: MessageType.BALANCE,
          balances,
          timestamp: Date.now(),
        });
      }
    }
  }

  private handleTickerUpdate(message: any): void {
    if (message.event === "subscribe") {
      if (message.error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–∏–∫–µ—Ä:", message.error);
      } else {
        console.log("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä ETH_USDT");
      }
      return;
    }

    if (message.event === "update" && message.result) {
      const ticker = message.result;
      const price = parseFloat(ticker.last);
      const volume = parseFloat(ticker.base_volume);

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–∏–∫ –≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–µ
      this.tickSpeedIndicator.addTick(Date.now());
      this.tickCounter++;

      // –ö–∞–∂–¥—ã–µ 20 —Ç–∏–∫–æ–≤ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
      if (this.tickCounter % 20 === 0) {
        const tickSpeed = this.tickSpeedIndicator.calculate();

        // –¢—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞–º
        if (this.broadcastManager && this.broadcastManager.isActive()) {
          this.broadcastManager.broadcast({
            type: MessageType.INDICATOR,
            name: "tick_speed",
            data: tickSpeed,
            timestamp: Date.now(),
          });
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–∫ –∫–ª–∏–µ–Ω—Ç–∞–º
      if (this.broadcastManager && this.broadcastManager.isActive()) {
        this.broadcastManager.broadcast({
          type: MessageType.TICK,
          symbol: ticker.currency_pair,
          price: price,
          volume: volume,
          timestamp: Date.now(),
        });
      }
    }
  }

  private handleOrderBookUpdate(message: any): void {
    if (message.event === "subscribe") {
      if (message.error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Order Book:", message.error);
      } else {
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Order Book`);
      }
      return;
    }

    if (message.event === "update" && message.result && this.orderBookManager) {
      this.orderBookManager.processUpdate(message.result);

      this.obUpdateCounter++;

      // ‚úÖ –î–æ–±–∞–≤–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥
      if (this.obUpdateCounter === 1) {
        console.log("üìä Order Book: –Ω–∞—á–∞–ª–∏ –ø–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
      }

      // –ö–∞–∂–¥–æ–µ 50-–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–≤–ª–µ–Ω–∏–µ –∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º Order Book
      if (this.obUpdateCounter % 50 === 0) {
        console.log(
          `üìä Order Book: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ #${this.obUpdateCounter}, –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞–º`
        );

        const orderBook = this.orderBookManager.getOrderBook();
        if (orderBook) {
          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–≤–ª–µ–Ω–∏–µ
          const pressure = this.obPressureIndicator.calculate(orderBook);

          // ‚úÖ –¢—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º Order Book –¥–∞–Ω–Ω—ã–µ
          if (this.broadcastManager && this.broadcastManager.isActive()) {
            const ratio = this.orderBookManager.getVolumeRatio();
            if (ratio) {
              this.broadcastManager.broadcast({
                type: MessageType.ORDERBOOK,
                symbol: orderBook.symbol,
                data: {
                  askVolume: ratio.askVolume,
                  bidVolume: ratio.bidVolume,
                  askPercent: ratio.askPercent,
                  bidPercent: ratio.bidPercent,
                  spread: this.orderBookManager.getSpread() || undefined,
                  midPrice: this.orderBookManager.getMidPrice() || undefined,
                },
                timestamp: orderBook.timestamp,
              });
              console.log("  ‚úÖ Order Book –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã");
            }

            // –¢—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–∞–≤–ª–µ–Ω–∏—è
            this.broadcastManager.broadcast({
              type: MessageType.INDICATOR,
              name: "orderbook_pressure",
              data: pressure,
              timestamp: Date.now(),
            });
            console.log("  ‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä orderbook_pressure –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
          } else {
            console.log("  ‚ö†Ô∏è BroadcastManager –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω");
          }

          this.previousOBPressure = pressure;
        } else {
          console.log("  ‚ö†Ô∏è Order Book –Ω–µ –≥–æ—Ç–æ–≤");
        }
      }
    }
  }

  // ==========================================================================
  // PING-PONG –ú–ï–•–ê–ù–ò–ó–ú
  // ==========================================================================

  private startPingPong(): void {
    console.log(
      `üèì –ó–∞–ø—É—Å–∫ ping-pong —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${this.pingInterval / 1000} —Å–µ–∫—É–Ω–¥`
    );
    this.sendPing();
    this.pingTimer = setInterval(() => {
      this.sendPing();
    }, this.pingInterval);
  }

  private stopPingPong(): void {
    if (this.pingTimer) {
      clearInterval(this.pingTimer);
      this.pingTimer = null;
      console.log("üèì Ping-pong –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }
  }

  private sendPing(): void {
    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
      console.log("‚ö†Ô∏è  WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ping");
      return;
    }

    const currentTime = Math.floor(Date.now() / 1000);
    const pingMessage = {
      time: currentTime,
      channel: "spot.ping",
    };

    try {
      this.lastPingSentTime = Date.now();
      const timeISO = new Date(this.lastPingSentTime).toISOString();

      this.ws.send(JSON.stringify(pingMessage));
      console.log(`üèì PING –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω [${timeISO}]`);

      this.pongTimeout = setTimeout(() => {
        const timeSinceLastPong = Date.now() - this.lastPongTime;
        console.log(
          `‚ö†Ô∏è  PONG –Ω–µ –ø–æ–ª—É—á–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ (–ø–æ—Å–ª–µ–¥–Ω–∏–π: ${Math.floor(
            timeSinceLastPong / 1000
          )}—Å –Ω–∞–∑–∞–¥)`
        );
        console.log("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...");

        if (this.state === EngineState.RUNNING) {
          if (this.ws) {
            this.ws.close();
          }
        }
      }, 30000);
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ping:", error.message);
    }
  }

  // ==========================================================================
  // –ü–û–î–ü–ò–°–ö–ò –ù–ê –ö–ê–ù–ê–õ–´ WEBSOCKET
  // ==========================================================================

  private subscribeToBalances(): void {
    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
      console.log(
        "‚ö†Ô∏è  WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å—ã"
      );
      return;
    }

    console.log("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤...");

    const currentTime = Math.floor(Date.now() / 1000);
    const channel = "spot.balances";
    const event = "subscribe";

    const auth = this.gateio.generateWebSocketAuth(channel, event, currentTime);

    const subscribeMessage = {
      time: currentTime,
      channel: channel,
      event: event,
      auth: auth,
    };

    try {
      this.ws.send(JSON.stringify(subscribeMessage));
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å—ã:", error.message);
    }
  }

  private subscribeToTicker(): void {
    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
      console.log(
        "‚ö†Ô∏è  WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–∏–∫–µ—Ä"
      );
      return;
    }

    console.log("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä ETH_USDT...");

    const subscribeMessage = this.gateio.createTickerSubscription(["ETH_USDT"]);

    try {
      this.ws.send(JSON.stringify(subscribeMessage));
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–∏–∫–µ—Ä:", error.message);
    }
  }

  private subscribeToOrderBookUpdates(): void {
    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
      console.log(
        "‚ö†Ô∏è  WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Order Book"
      );
      return;
    }

    if (!this.orderBookManager) {
      console.log("‚ö†Ô∏è  OrderBookManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
      return;
    }

    const symbol = this.orderBookManager.getOrderBook()?.symbol || "ETH_USDT";
    console.log(`üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Order Book –¥–ª—è ${symbol}...`);

    const subscribeMessage = this.gateio.createOrderBookUpdateSubscription(
      symbol,
      "100ms"
    );

    try {
      this.ws.send(JSON.stringify(subscribeMessage));
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Order Book:", error.message);
    }
  }

  // ==========================================================================
  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  // ==========================================================================

  private sleep(ms: number): Promise<void> {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
}
