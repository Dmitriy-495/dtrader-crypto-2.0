/**
 * VolumeConfirmationIndicator - –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä—ë–º–æ–≤
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–æ—Å—Ç –æ–±—ä—ë–º–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ü–µ–Ω–æ–≤—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π
 */

export interface VolumeConfirmationConfig {
  period: number; // –ü–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)
  volumeThreshold: number; // –ü–æ—Ä–æ–≥ —Ä–æ—Å—Ç–∞ –æ–±—ä—ë–º–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (1.5 = +50%)
  priceChangeThreshold: number; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ % –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
}

export enum VolumeSignal {
  STRONG_BUY = 'STRONG_BUY',       // –°–∏–ª—å–Ω—ã–π –æ–±—ä—ë–º + —Ä–æ—Å—Ç —Ü–µ–Ω—ã
  BUY = 'BUY',                     // –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –æ–±—ä—ë–º + —Ä–æ—Å—Ç —Ü–µ–Ω—ã
  STRONG_SELL = 'STRONG_SELL',     // –°–∏–ª—å–Ω—ã–π –æ–±—ä—ë–º + –ø–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã
  SELL = 'SELL',                   // –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –æ–±—ä—ë–º + –ø–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã
  NEUTRAL = 'NEUTRAL',             // –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  NO_VOLUME = 'NO_VOLUME'          // –î–≤–∏–∂–µ–Ω–∏–µ –±–µ–∑ –æ–±—ä—ë–º–∞ (—Å–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª)
}

export interface VolumeConfirmationResult {
  signal: VolumeSignal;
  volumeRatio: number;           // –¢–µ–∫—É—â–∏–π –æ–±—ä—ë–º / —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º
  averageVolume: number;         // –°—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º –∑–∞ –ø–µ—Ä–∏–æ–¥
  currentVolume: number;         // –¢–µ–∫—É—â–∏–π –æ–±—ä—ë–º
  priceChange: number;           // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ %
  isVolumeSpike: boolean;        // –†–µ–∑–∫–∏–π –≤—Å–ø–ª–µ—Å–∫ –æ–±—ä—ë–º–∞
  isConfirmed: boolean;          // –°–∏–≥–Ω–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –æ–±—ä—ë–º–æ–º
}

interface VolumeDataPoint {
  volume: number;
  price: number;
  timestamp: number;
}

export class VolumeConfirmationIndicator {
  private config: VolumeConfirmationConfig;
  private volumeHistory: VolumeDataPoint[] = [];
  private lastPrice: number | null = null;

  constructor(config: Partial<VolumeConfirmationConfig> = {}) {
    this.config = {
      period: config.period || 20,
      volumeThreshold: config.volumeThreshold || 1.5,
      priceChangeThreshold: config.priceChangeThreshold || 0.1
    };
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Ç–æ—á–∫—É –¥–∞–Ω–Ω—ã—Ö (—Ç–∏–∫)
   */
  addTick(price: number, volume: number, timestamp: number = Date.now()): void {
    this.volumeHistory.push({ volume, price, timestamp });

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if (this.volumeHistory.length > this.config.period * 2) {
      this.volumeHistory.shift();
    }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä—ë–º–æ–≤
   */
  calculate(): VolumeConfirmationResult | null {
    if (this.volumeHistory.length < this.config.period) {
      return null; // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
    }

    const currentData = this.volumeHistory[this.volumeHistory.length - 1];
    const previousData = this.volumeHistory[this.volumeHistory.length - 2];

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º
    const recentHistory = this.volumeHistory.slice(-this.config.period);
    const averageVolume = recentHistory.reduce((sum, d) => sum + d.volume, 0) / this.config.period;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
    let priceChange = 0;
    if (this.lastPrice !== null && this.lastPrice !== 0) {
      priceChange = ((currentData.price - this.lastPrice) / this.lastPrice) * 100;
    }
    this.lastPrice = currentData.price;

    // –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä—ë–º–∞ –∫ —Å—Ä–µ–¥–Ω–µ–º—É
    const volumeRatio = currentData.volume / averageVolume;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–ø–ª–µ—Å–∫ –æ–±—ä—ë–º–∞
    const isVolumeSpike = volumeRatio > this.config.volumeThreshold * 1.5;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
    const signal = this.determineSignal(priceChange, volumeRatio);

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –ª–∏ —Å–∏–≥–Ω–∞–ª –æ–±—ä—ë–º–æ–º?
    const isConfirmed = volumeRatio >= this.config.volumeThreshold && 
                        Math.abs(priceChange) >= this.config.priceChangeThreshold;

    return {
      signal,
      volumeRatio: Math.round(volumeRatio * 100) / 100,
      averageVolume: Math.round(averageVolume * 100) / 100,
      currentVolume: Math.round(currentData.volume * 100) / 100,
      priceChange: Math.round(priceChange * 1000) / 1000,
      isVolumeSpike,
      isConfirmed
    };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∏ –æ–±—ä—ë–º–∞
   */
  private determineSignal(priceChange: number, volumeRatio: number): VolumeSignal {
    const minChange = this.config.priceChangeThreshold;
    const threshold = this.config.volumeThreshold;

    // –ù–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
    if (Math.abs(priceChange) < minChange) {
      return VolumeSignal.NEUTRAL;
    }

    // –†–æ—Å—Ç —Ü–µ–Ω—ã
    if (priceChange > minChange) {
      if (volumeRatio < 1.0) {
        return VolumeSignal.NO_VOLUME; // –†–æ—Å—Ç –±–µ–∑ –æ–±—ä—ë–º–∞ - —Å–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª
      } else if (volumeRatio >= threshold * 1.5) {
        return VolumeSignal.STRONG_BUY; // –°–∏–ª—å–Ω—ã–π –æ–±—ä—ë–º
      } else if (volumeRatio >= threshold) {
        return VolumeSignal.BUY; // –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –æ–±—ä—ë–º
      }
      return VolumeSignal.NEUTRAL; // –û–±—ä—ë–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω
    }

    // –ü–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã
    if (priceChange < -minChange) {
      if (volumeRatio < 1.0) {
        return VolumeSignal.NO_VOLUME; // –ü–∞–¥–µ–Ω–∏–µ –±–µ–∑ –æ–±—ä—ë–º–∞
      } else if (volumeRatio >= threshold * 1.5) {
        return VolumeSignal.STRONG_SELL; // –°–∏–ª—å–Ω—ã–π –æ–±—ä—ë–º
      } else if (volumeRatio >= threshold) {
        return VolumeSignal.SELL; // –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –æ–±—ä—ë–º
      }
      return VolumeSignal.NEUTRAL; // –û–±—ä—ë–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω
    }

    return VolumeSignal.NEUTRAL;
  }

  /**
   * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –æ—Ç –¥—Ä—É–≥–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
   */
  confirmSignal(externalSignal: 'BUY' | 'SELL' | 'NEUTRAL'): boolean {
    const result = this.calculate();
    if (!result || !result.isConfirmed) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if (externalSignal === 'BUY') {
      return result.signal === VolumeSignal.BUY || result.signal === VolumeSignal.STRONG_BUY;
    }

    if (externalSignal === 'SELL') {
      return result.signal === VolumeSignal.SELL || result.signal === VolumeSignal.STRONG_SELL;
    }

    return false;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Ç–æ—á–µ–∫ –∏—Å—Ç–æ—Ä–∏–∏
   */
  getHistory(count: number = 10): VolumeDataPoint[] {
    return this.volumeHistory.slice(-count);
  }

  /**
   * –°–±—Ä–æ—Å–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
   */
  reset(): void {
    this.volumeHistory = [];
    this.lastPrice = null;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
   */
  static getSignalText(signal: VolumeSignal): string {
    switch (signal) {
      case VolumeSignal.STRONG_BUY: return '–°–∏–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ü–û–ö–£–ü–ö–ò';
      case VolumeSignal.BUY: return '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏';
      case VolumeSignal.STRONG_SELL: return '–°–∏–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ü–†–û–î–ê–ñ–ò';
      case VolumeSignal.SELL: return '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏';
      case VolumeSignal.NO_VOLUME: return '–î–≤–∏–∂–µ–Ω–∏–µ –±–µ–∑ –æ–±—ä—ë–º–∞ (—Å–ª–∞–±–æ)';
      case VolumeSignal.NEUTRAL: return '–ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è';
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
   */
  static getSignalEmoji(signal: VolumeSignal): string {
    switch (signal) {
      case VolumeSignal.STRONG_BUY: return 'üü¢üü¢';
      case VolumeSignal.BUY: return 'üü¢';
      case VolumeSignal.STRONG_SELL: return 'üî¥üî¥';
      case VolumeSignal.SELL: return 'üî¥';
      case VolumeSignal.NO_VOLUME: return '‚ö†Ô∏è';
      case VolumeSignal.NEUTRAL: return '‚ö™';
    }
  }
}