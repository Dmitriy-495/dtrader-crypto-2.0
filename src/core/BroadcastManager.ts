/**
 * BroadcastManager - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ö–∞–± –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞–º
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä–æ–º, –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
 */

import { WebSocketServer, WebSocket } from "ws";
import {
  ClientMessage,
  LogMessage,
  LogLevel,
  MessageType,
  SubscriptionChannel,
} from "../types";

// ============================================================================
// –ò–ù–¢–ï–†–§–ï–ô–°–´
// ============================================================================

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è BroadcastManager
 */
export interface BroadcastManagerConfig {
  port: number; // –ü–æ—Ä—Ç –¥–ª—è WebSocket —Å–µ—Ä–≤–µ—Ä–∞
  enabled: boolean; // –í–∫–ª—é—á–µ–Ω –ª–∏ broadcaster
}

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–µ
 */
interface ClientInfo {
  id: string;
  ws: WebSocket;
  connectedAt: number;
  lastPing: number;
  subscriptions: Set<SubscriptionChannel>; // –ü–æ–¥–ø–∏—Å–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
}

// ============================================================================
// –ö–õ–ê–°–° BROADCASTMANAGER
// ============================================================================

export class BroadcastManager {
  private config: BroadcastManagerConfig;
  private wss: WebSocketServer | null = null;
  private clients: Map<string, ClientInfo> = new Map();
  private messageBuffer: ClientMessage[] = [];
  private maxBufferSize: number = 100;
  private isRunning: boolean = false;

  /**
   * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
   */
  constructor(config: BroadcastManagerConfig) {
    this.config = config;
  }

  // ==========================================================================
  // –£–ü–†–ê–í–õ–ï–ù–ò–ï –ñ–ò–ó–ù–ï–ù–ù–´–ú –¶–ò–ö–õ–û–ú
  // ==========================================================================

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä
   */
  start(): void {
    if (!this.config.enabled) {
      console.log("üì° BroadcastManager –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
      return;
    }

    if (this.isRunning) {
      console.log("‚ö†Ô∏è  BroadcastManager —É–∂–µ –∑–∞–ø—É—â–µ–Ω");
      return;
    }

    try {
      console.log(
        `\nüì° –ó–∞–ø—É—Å–∫ BroadcastManager –Ω–∞ –ø–æ—Ä—Ç—É ${this.config.port}...`
      );

      this.wss = new WebSocketServer({
        port: this.config.port,
        perMessageDeflate: false,
      });

      this.wss.on("connection", (ws: WebSocket) => {
        this.handleNewConnection(ws);
      });

      this.wss.on("error", (error: Error) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞:", error.message);
      });

      this.isRunning = true;
      console.log(
        `‚úÖ BroadcastManager –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://0.0.0.0:${this.config.port}`
      );
      console.log(`üìä –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤...\n`);
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ BroadcastManager:", error.message);
      throw error;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä
   */
  stop(): void {
    if (!this.isRunning) {
      return;
    }

    console.log("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ BroadcastManager...");

    // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    this.clients.forEach((client, clientId) => {
      this.sendToClient(clientId, {
        type: MessageType.DISCONNECT,
        clientId,
        reason: "server_shutdown",
        timestamp: Date.now(),
      });
      client.ws.close();
    });

    this.clients.clear();

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    if (this.wss) {
      this.wss.close();
      this.wss = null;
    }

    this.isRunning = false;
    console.log("‚úÖ BroadcastManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n");
  }

  // ==========================================================================
  // –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø–ú–ò
  // ==========================================================================

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
   */
  private handleNewConnection(ws: WebSocket): void {
    const clientId = this.generateClientId();

    const clientInfo: ClientInfo = {
      id: clientId,
      ws: ws,
      connectedAt: Date.now(),
      lastPing: Date.now(),
      subscriptions: new Set(), // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–æ–∫
    };

    this.clients.set(clientId, clientInfo);

    console.log(
      `üîå –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: ${clientId} (–≤—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${this.clients.size})`
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É –µ–≥–æ ID
    this.sendToClient(clientId, {
      type: MessageType.CONNECT,
      clientId,
      clientInfo: {
        hostname: "server",
        platform: process.platform,
      },
      timestamp: Date.now(),
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–ª–∏–µ–Ω—Ç–∞
    ws.on("message", (data: Buffer) => {
      this.handleClientMessage(clientId, data);
    });

    ws.on("close", () => {
      this.handleClientDisconnect(clientId);
    });

    ws.on("error", (error: Error) => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}:`, error.message);
    });
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
   */
  private handleClientMessage(clientId: string, data: Buffer): void {
    try {
      const rawMessage = data.toString().trim();

      // ‚úÖ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (!rawMessage || rawMessage.length === 0) {
        return;
      }

      const message = JSON.parse(rawMessage);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PING –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
      if (message.type === MessageType.PING) {
        this.sendToClient(clientId, {
          type: MessageType.PONG,
          timestamp: Date.now(),
        });

        const client = this.clients.get(clientId);
        if (client) {
          client.lastPing = Date.now();
        }
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SUBSCRIBE
      if (message.type === MessageType.SUBSCRIBE) {
        this.handleSubscribe(clientId, message.channels);
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º UNSUBSCRIBE
      if (message.type === MessageType.UNSUBSCRIBE) {
        this.handleUnsubscribe(clientId, message.channels);
        return;
      }

      // ‚úÖ –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ
      console.warn(
        `‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${clientId}:`,
        message.type || "undefined"
      );
      this.sendToClient(clientId, {
        type: MessageType.ERROR,
        error: "Unknown message type",
        details: `Type '${message.type}' is not supported`,
        timestamp: Date.now(),
      });
    } catch (error: any) {
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${clientId}:`,
        error.message
      );
      this.sendToClient(clientId, {
        type: MessageType.ERROR,
        error: "Invalid message format",
        details: error.message,
        timestamp: Date.now(),
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
   */
  private handleClientDisconnect(clientId: string): void {
    const client = this.clients.get(clientId);
    if (client) {
      const channels = Array.from(client.subscriptions);
      console.log(
        `üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: ${clientId} (–ø–æ–¥–ø–∏—Å–∫–∏: ${
          channels.join(", ") || "–Ω–µ—Ç"
        }) (–æ—Å—Ç–∞–ª–æ—Å—å: ${this.clients.size - 1})`
      );
    }
    this.clients.delete(clientId);
  }

  // ==========================================================================
  // –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ê–ú–ò
  // ==========================================================================

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã
   */
  private handleSubscribe(
    clientId: string,
    channels: SubscriptionChannel[]
  ): void {
    const client = this.clients.get(clientId);
    if (!client) {
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
    channels.forEach((channel) => {
      client.subscriptions.add(channel);
    });

    console.log(`üì• –ö–ª–∏–µ–Ω—Ç ${clientId} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞: ${channels.join(", ")}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    this.sendToClient(clientId, {
      type: MessageType.SUBSCRIBED,
      channels: channels,
      message: `Successfully subscribed to ${channels.length} channel(s)`,
      timestamp: Date.now(),
    });
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø–∏—Å–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç –∫–∞–Ω–∞–ª–æ–≤
   */
  private handleUnsubscribe(
    clientId: string,
    channels: SubscriptionChannel[]
  ): void {
    const client = this.clients.get(clientId);
    if (!client) {
      return;
    }

    // –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
    channels.forEach((channel) => {
      client.subscriptions.delete(channel);
    });

    console.log(`üì§ –ö–ª–∏–µ–Ω—Ç ${clientId} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç: ${channels.join(", ")}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    this.sendToClient(clientId, {
      type: MessageType.UNSUBSCRIBED,
      channels: channels,
      message: `Successfully unsubscribed from ${channels.length} channel(s)`,
      timestamp: Date.now(),
    });
  }

  // ==========================================================================
  // –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–ô
  // ==========================================================================

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
   */
  broadcast(message: ClientMessage): void {
    if (!this.config.enabled || !this.isRunning) {
      return;
    }

    // ‚úÖ –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
    if (this.clients.size === 0) {
      return;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è
    let channel: SubscriptionChannel | null = null;
    switch (message.type) {
      case MessageType.LOG:
        channel = SubscriptionChannel.LOGS;
        break;
      case MessageType.TICK:
        channel = SubscriptionChannel.TICKS;
        break;
      case MessageType.ORDERBOOK:
        channel = SubscriptionChannel.ORDERBOOK;
        break;
      case MessageType.BALANCE:
        channel = SubscriptionChannel.BALANCE;
        break;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏
    if (message.type === MessageType.LOG) {
      this.addToBuffer(message);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
    this.clients.forEach((client, clientId) => {
      // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (—Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è) –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–ø–∏—Å–∞–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
      if (channel === null || client.subscriptions.has(channel)) {
        this.sendToClient(clientId, message);
      }
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
   */
  private sendToClient(clientId: string, message: ClientMessage): void {
    const client = this.clients.get(clientId);
    if (!client || client.ws.readyState !== WebSocket.OPEN) {
      return;
    }

    try {
      client.ws.send(JSON.stringify(message));
    } catch (error: any) {
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É ${clientId}:`,
        error.message
      );
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  broadcastLog(level: LogLevel, message: string, source?: string): void {
    this.broadcast({
      type: MessageType.LOG,
      level,
      message,
      source,
      timestamp: Date.now(),
    });
  }

  // ==========================================================================
  // –ë–£–§–ï–†–ò–ó–ê–¶–ò–Ø
  // ==========================================================================

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
   */
  private addToBuffer(message: ClientMessage): void {
    this.messageBuffer.push(message);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
    if (this.messageBuffer.length > this.maxBufferSize) {
      this.messageBuffer.shift();
    }
  }

  // ==========================================================================
  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  // ==========================================================================

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–ª–∏–µ–Ω—Ç–∞
   */
  private generateClientId(): string {
    return `client_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
   */
  getConnectedClientsCount(): number {
    return this.clients.size;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ broadcaster
   */
  isActive(): boolean {
    return this.isRunning;
  }
}
