/**
 * LogBroadcaster - WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –ª–æ–≥–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞–º
 */

import { WebSocketServer, WebSocket } from "ws";
import { ClientMessage, LogMessage, LogLevel, MessageType } from "../types";

// ============================================================================
// –ò–ù–¢–ï–†–§–ï–ô–°–´
// ============================================================================

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LogBroadcaster
 */
export interface LogBroadcasterConfig {
  port: number; // –ü–æ—Ä—Ç –¥–ª—è WebSocket —Å–µ—Ä–≤–µ—Ä–∞
  enabled: boolean; // –í–∫–ª—é—á–µ–Ω –ª–∏ broadcaster
}

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–µ
 */
interface ClientInfo {
  id: string;
  ws: WebSocket;
  connectedAt: number;
  lastPing: number;
}

// ============================================================================
// –ö–õ–ê–°–° LOGBROADCASTER
// ============================================================================

export class LogBroadcaster {
  private config: LogBroadcasterConfig;
  private wss: WebSocketServer | null = null;
  private clients: Map<string, ClientInfo> = new Map();
  private messageBuffer: ClientMessage[] = [];
  private maxBufferSize: number = 100;
  private isRunning: boolean = false;

  /**
   * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
   */
  constructor(config: LogBroadcasterConfig) {
    this.config = config;
  }

  // ==========================================================================
  // –£–ü–†–ê–í–õ–ï–ù–ò–ï –ñ–ò–ó–ù–ï–ù–ù–´–ú –¶–ò–ö–õ–û–ú
  // ==========================================================================

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä
   */
  start(): void {
    if (!this.config.enabled) {
      console.log("üì° LogBroadcaster –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
      return;
    }

    if (this.isRunning) {
      console.log("‚ö†Ô∏è  LogBroadcaster —É–∂–µ –∑–∞–ø—É—â–µ–Ω");
      return;
    }

    try {
      console.log(`\nüì° –ó–∞–ø—É—Å–∫ LogBroadcaster –Ω–∞ –ø–æ—Ä—Ç—É ${this.config.port}...`);

      this.wss = new WebSocketServer({
        port: this.config.port,
        perMessageDeflate: false,
      });

      this.wss.on("connection", (ws: WebSocket) => {
        this.handleNewConnection(ws);
      });

      this.wss.on("error", (error: Error) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞:", error.message);
      });

      this.isRunning = true;
      console.log(
        `‚úÖ LogBroadcaster –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://0.0.0.0:${this.config.port}`
      );
      console.log(`üìä –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤...\n`);
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ LogBroadcaster:", error.message);
      throw error;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä
   */
  stop(): void {
    if (!this.isRunning) {
      return;
    }

    console.log("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ LogBroadcaster...");

    // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    this.clients.forEach((client, clientId) => {
      this.sendToClient(clientId, {
        type: MessageType.DISCONNECT,
        clientId,
        reason: "server_shutdown",
        timestamp: Date.now(),
      });
      client.ws.close();
    });

    this.clients.clear();

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    if (this.wss) {
      this.wss.close();
      this.wss = null;
    }

    this.isRunning = false;
    console.log("‚úÖ LogBroadcaster –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n");
  }

  // ==========================================================================
  // –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø–ú–ò
  // ==========================================================================

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
   */
  private handleNewConnection(ws: WebSocket): void {
    const clientId = this.generateClientId();

    const clientInfo: ClientInfo = {
      id: clientId,
      ws: ws,
      connectedAt: Date.now(),
      lastPing: Date.now(),
    };

    this.clients.set(clientId, clientInfo);

    console.log(
      `üîå –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: ${clientId} (–≤—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${this.clients.size})`
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É –µ–≥–æ ID
    this.sendToClient(clientId, {
      type: MessageType.CONNECT,
      clientId,
      clientInfo: {
        hostname: "server",
        platform: process.platform,
      },
      timestamp: Date.now(),
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    this.messageBuffer.forEach((msg) => {
      this.sendToClient(clientId, msg);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–ª–∏–µ–Ω—Ç–∞
    ws.on("message", (data: Buffer) => {
      this.handleClientMessage(clientId, data);
    });

    ws.on("close", () => {
      this.handleClientDisconnect(clientId);
    });

    ws.on("error", (error: Error) => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}:`, error.message);
    });
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
   */
  private handleClientMessage(clientId: string, data: Buffer): void {
    try {
      const message = JSON.parse(data.toString());

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PONG –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
      if (message.type === MessageType.PING) {
        this.sendToClient(clientId, {
          type: MessageType.PONG,
          timestamp: Date.now(),
        });

        const client = this.clients.get(clientId);
        if (client) {
          client.lastPing = Date.now();
        }
      }
    } catch (error: any) {
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${clientId}:`,
        error.message
      );
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
   */
  private handleClientDisconnect(clientId: string): void {
    this.clients.delete(clientId);
    console.log(
      `üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: ${clientId} (–æ—Å—Ç–∞–ª–æ—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤: ${this.clients.size})`
    );
  }

  // ==========================================================================
  // –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–ô
  // ==========================================================================

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
   */
  broadcast(message: ClientMessage): void {
    if (!this.config.enabled || !this.isRunning) {
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
    this.addToBuffer(message);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
    this.clients.forEach((client, clientId) => {
      this.sendToClient(clientId, message);
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
   */
  private sendToClient(clientId: string, message: ClientMessage): void {
    const client = this.clients.get(clientId);
    if (!client || client.ws.readyState !== WebSocket.OPEN) {
      return;
    }

    try {
      client.ws.send(JSON.stringify(message));
    } catch (error: any) {
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É ${clientId}:`,
        error.message
      );
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  broadcastLog(level: LogLevel, message: string, source?: string): void {
    this.broadcast({
      type: MessageType.LOG,
      level,
      message,
      source,
      timestamp: Date.now(),
    });
  }

  // ==========================================================================
  // –ë–£–§–ï–†–ò–ó–ê–¶–ò–Ø
  // ==========================================================================

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
   */
  private addToBuffer(message: ClientMessage): void {
    this.messageBuffer.push(message);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
    if (this.messageBuffer.length > this.maxBufferSize) {
      this.messageBuffer.shift();
    }
  }

  // ==========================================================================
  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  // ==========================================================================

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–ª–∏–µ–Ω—Ç–∞
   */
  private generateClientId(): string {
    return `client_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
   */
  getConnectedClientsCount(): number {
    return this.clients.size;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ broadcaster
   */
  isActive(): boolean {
    return this.isRunning;
  }
}
