/**
 * Logger - –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ console –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –ª–æ–≥–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞–º
 */

import { LogBroadcaster } from "./LogBroadcaster";
import { LogLevel } from "../types";

// ============================================================================
// –ö–õ–ê–°–° LOGGER
// ============================================================================

export class Logger {
  private broadcaster: LogBroadcaster | null = null;
  private originalConsole: {
    log: typeof console.log;
    error: typeof console.error;
    warn: typeof console.warn;
    info: typeof console.info;
  };
  private isIntercepting: boolean = false;

  /**
   * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
   */
  constructor() {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã console
    this.originalConsole = {
      log: console.log.bind(console),
      error: console.error.bind(console),
      warn: console.warn.bind(console),
      info: console.info.bind(console),
    };
  }

  // ==========================================================================
  // –£–ü–†–ê–í–õ–ï–ù–ò–ï
  // ==========================================================================

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç LogBroadcaster –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
   */
  setBroadcaster(broadcaster: LogBroadcaster): void {
    this.broadcaster = broadcaster;
  }

  /**
   * –í–∫–ª—é—á–∞–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç console
   */
  startIntercepting(): void {
    if (this.isIntercepting) {
      return;
    }

    console.log = (...args: any[]) => {
      this.handleLog(LogLevel.INFO, args);
    };

    console.error = (...args: any[]) => {
      this.handleLog(LogLevel.ERROR, args);
    };

    console.warn = (...args: any[]) => {
      this.handleLog(LogLevel.WARN, args);
    };

    console.info = (...args: any[]) => {
      this.handleLog(LogLevel.INFO, args);
    };

    this.isIntercepting = true;
    this.originalConsole.log("‚úÖ Logger: –ø–µ—Ä–µ—Ö–≤–∞—Ç console –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç console
   */
  stopIntercepting(): void {
    if (!this.isIntercepting) {
      return;
    }

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    console.log = this.originalConsole.log;
    console.error = this.originalConsole.error;
    console.warn = this.originalConsole.warn;
    console.info = this.originalConsole.info;

    this.isIntercepting = false;
    this.originalConsole.log("‚úÖ Logger: –ø–µ—Ä–µ—Ö–≤–∞—Ç console –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
  }

  // ==========================================================================
  // –û–ë–†–ê–ë–û–¢–ö–ê –õ–û–ì–û–í
  // ==========================================================================

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  private handleLog(level: LogLevel, args: any[]): void {
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = args
      .map((arg) => {
        if (typeof arg === "object") {
          try {
            return JSON.stringify(arg, null, 2);
          } catch {
            return String(arg);
          }
        }
        return String(arg);
      })
      .join(" ");

    // –í—ã–≤–æ–¥–∏–º –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π console
    switch (level) {
      case LogLevel.ERROR:
        this.originalConsole.error(message);
        break;
      case LogLevel.WARN:
        this.originalConsole.warn(message);
        break;
      default:
        this.originalConsole.log(message);
    }

    // –¢—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –µ—Å–ª–∏ –µ—Å—Ç—å broadcaster
    if (this.broadcaster && this.broadcaster.isActive()) {
      this.broadcaster.broadcastLog(level, message);
    }
  }

  // ==========================================================================
  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
  // ==========================================================================

  /**
   * –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ log (–±–µ–∑ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞)
   */
  directLog(message: string): void {
    this.originalConsole.log(message);
  }

  /**
   * –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ error (–±–µ–∑ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞)
   */
  directError(message: string): void {
    this.originalConsole.error(message);
  }

  /**
   * –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ warn (–±–µ–∑ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞)
   */
  directWarn(message: string): void {
    this.originalConsole.warn(message);
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—Å–ø–µ—Ö–æ–º
   */
  success(message: string): void {
    const formattedMessage = `‚úÖ ${message}`;
    this.originalConsole.log(formattedMessage);

    if (this.broadcaster && this.broadcaster.isActive()) {
      this.broadcaster.broadcastLog(LogLevel.SUCCESS, formattedMessage);
    }
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
   */
  info(message: string): void {
    const formattedMessage = `‚ÑπÔ∏è  ${message}`;
    this.originalConsole.info(formattedMessage);

    if (this.broadcaster && this.broadcaster.isActive()) {
      this.broadcaster.broadcastLog(LogLevel.INFO, formattedMessage);
    }
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
   */
  warn(message: string): void {
    const formattedMessage = `‚ö†Ô∏è  ${message}`;
    this.originalConsole.warn(formattedMessage);

    if (this.broadcaster && this.broadcaster.isActive()) {
      this.broadcaster.broadcastLog(LogLevel.WARN, formattedMessage);
    }
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
   */
  error(message: string): void {
    const formattedMessage = `‚ùå ${message}`;
    this.originalConsole.error(formattedMessage);

    if (this.broadcaster && this.broadcaster.isActive()) {
      this.broadcaster.broadcastLog(LogLevel.ERROR, formattedMessage);
    }
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ—Ç–ª–∞–¥–∫–æ–π
   */
  debug(message: string): void {
    const formattedMessage = `üîç ${message}`;
    this.originalConsole.log(formattedMessage);

    if (this.broadcaster && this.broadcaster.isActive()) {
      this.broadcaster.broadcastLog(LogLevel.DEBUG, formattedMessage);
    }
  }
}
