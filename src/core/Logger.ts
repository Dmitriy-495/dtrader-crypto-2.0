/**
 * Logger - –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ console –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –ª–æ–≥–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞–º
 */

import { BroadcastManager } from "./BroadcastManager";
import { LogLevel } from "../types";

export class Logger {
  private broadcaster: BroadcastManager | null = null;
  private originalConsole: {
    log: typeof console.log;
    error: typeof console.error;
    warn: typeof console.warn;
    info: typeof console.info;
  };
  private isIntercepting: boolean = false;

  constructor() {
    this.originalConsole = {
      log: console.log.bind(console),
      error: console.error.bind(console),
      warn: console.warn.bind(console),
      info: console.info.bind(console),
    };
  }

  setBroadcaster(broadcaster: BroadcastManager): void {
    this.broadcaster = broadcaster;
  }

  startIntercepting(): void {
    if (this.isIntercepting) {
      return;
    }

    console.log = (...args: any[]) => {
      this.handleLog(LogLevel.INFO, args);
    };

    console.error = (...args: any[]) => {
      this.handleLog(LogLevel.ERROR, args);
    };

    console.warn = (...args: any[]) => {
      this.handleLog(LogLevel.WARN, args);
    };

    console.info = (...args: any[]) => {
      this.handleLog(LogLevel.INFO, args);
    };

    this.isIntercepting = true;
    this.originalConsole.log("‚úÖ Logger: –ø–µ—Ä–µ—Ö–≤–∞—Ç console –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
  }

  stopIntercepting(): void {
    if (!this.isIntercepting) {
      return;
    }

    console.log = this.originalConsole.log;
    console.error = this.originalConsole.error;
    console.warn = this.originalConsole.warn;
    console.info = this.originalConsole.info;

    this.isIntercepting = false;
    this.originalConsole.log("‚úÖ Logger: –ø–µ—Ä–µ—Ö–≤–∞—Ç console –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
  }

  private handleLog(level: LogLevel, args: any[]): void {
    const message = args
      .map((arg) => {
        if (typeof arg === "object") {
          try {
            return JSON.stringify(arg, null, 2);
          } catch {
            return String(arg);
          }
        }
        return String(arg);
      })
      .join(" ");

    // –í—ã–≤–æ–¥–∏–º –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π console
    switch (level) {
      case LogLevel.ERROR:
        this.originalConsole.error(message);
        break;
      case LogLevel.WARN:
        this.originalConsole.warn(message);
        break;
      default:
        this.originalConsole.log(message);
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è
    const category = this.detectCategory(message);

    // ‚úÖ –í–°–ï–ì–î–ê —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –µ—Å–ª–∏ –µ—Å—Ç—å broadcaster
    if (this.broadcaster && this.broadcaster.isActive()) {
      this.broadcaster.broadcastLog(level, message, "server", category);
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ª–æ–≥–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
   */
  private detectCategory(message: string): "system" | "internal" {
    // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∑–∞–ø—É—Å–∫, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, —Å–≤—è–∑—å —Å –±–∏—Ä–∂–µ–π)
    if (
      message.includes("–ó–∞–ø—É—Å–∫") ||
      message.includes("–û—Å—Ç–∞–Ω–æ–≤–∫–∞") ||
      message.includes("–∑–∞–ø—É—â–µ–Ω") ||
      message.includes("–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω") ||
      message.includes("–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω") ||
      message.includes("–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω") ||
      message.includes("BroadcastManager") ||
      // ‚úÖ –í—Å—ë –æ –±–∏—Ä–∂–µ - –≤ system
      message.includes("PING") ||
      message.includes("PONG") ||
      message.includes("WebSocket") ||
      message.includes("–ø–æ–¥–ø–∏—Å–∫") ||
      message.includes("–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ") ||
      message.includes("Gate.io") ||
      message.includes("Order Book") ||
      message.includes("–°–Ω–∞–ø—à–æ—Ç") ||
      message.includes("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è") ||
      message.includes("—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω")
    ) {
      return "system";
    }

    // –û—Å—Ç–∞–ª—å–Ω–æ–µ - –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ª–æ–≥–∏
    return "internal";
  }

  directLog(message: string): void {
    this.originalConsole.log(message);
  }

  directError(message: string): void {
    this.originalConsole.error(message);
  }

  directWarn(message: string): void {
    this.originalConsole.warn(message);
  }

  success(message: string): void {
    const formattedMessage = `‚úÖ ${message}`;
    this.originalConsole.log(formattedMessage);

    const category = this.detectCategory(message);

    if (this.broadcaster && this.broadcaster.isActive()) {
      this.broadcaster.broadcastLog(
        LogLevel.SUCCESS,
        formattedMessage,
        "server",
        category
      );
    }
  }

  info(message: string): void {
    const formattedMessage = `‚ÑπÔ∏è  ${message}`;
    this.originalConsole.info(formattedMessage);

    const category = this.detectCategory(message);

    if (this.broadcaster && this.broadcaster.isActive()) {
      this.broadcaster.broadcastLog(
        LogLevel.INFO,
        formattedMessage,
        "server",
        category
      );
    }
  }

  warn(message: string): void {
    const formattedMessage = `‚ö†Ô∏è  ${message}`;
    this.originalConsole.warn(formattedMessage);

    const category = this.detectCategory(message);

    if (this.broadcaster && this.broadcaster.isActive()) {
      this.broadcaster.broadcastLog(
        LogLevel.WARN,
        formattedMessage,
        "server",
        category
      );
    }
  }

  error(message: string): void {
    const formattedMessage = `‚ùå ${message}`;
    this.originalConsole.error(formattedMessage);

    const category = this.detectCategory(message);

    if (this.broadcaster && this.broadcaster.isActive()) {
      this.broadcaster.broadcastLog(
        LogLevel.ERROR,
        formattedMessage,
        "server",
        category
      );
    }
  }

  debug(message: string): void {
    const formattedMessage = `üîç ${message}`;
    this.originalConsole.log(formattedMessage);

    if (this.broadcaster && this.broadcaster.isActive()) {
      this.broadcaster.broadcastLog(
        LogLevel.DEBUG,
        formattedMessage,
        "server",
        "internal"
      );
    }
  }
}
